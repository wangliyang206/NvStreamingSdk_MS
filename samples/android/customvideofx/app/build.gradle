apply plugin: 'com.android.application'

def extraLibPath = meisheSdkExtraPath(rootDir)

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.cdv.customvideofx"
        minSdkVersion 16
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    task libCopy(type: Copy) {
        copy {
            from extraLibPath + 'lib/android_armv7'
            into 'src/main/jniLibs/armeabi-v7a'
            include '*.so'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation fileTree(include: ['*.jar'], dir: extraLibPath + 'lib/android_jar')
}

def meisheSdkExtraPath(File rootDir) {
    String defaultPath = "../../../../"
    try {
        File confFile = new File(rootDir.getAbsolutePath() + "/../../../meishesdk_libpath.conf")
        if (!confFile.exists()) {
            if (confFile.createNewFile()) {
                FileOutputStream outputStream = new FileOutputStream(confFile)
                outputStream.write(defaultPath.getBytes())
                outputStream.close()
                return defaultPath
            }
        }
        BufferedReader br = new BufferedReader(new FileReader(confFile))
        String readline = ""
        StringBuffer sb = new StringBuffer()
        while ((readline = br.readLine()) != null) {
            sb.append(readline)
        }
        br.close()
        String pathTmp = sb.toString()
        pathTmp = pathTmp.replace("\\", "/")
        if (!pathTmp.endsWith("/")) {
            pathTmp += "/"
        }
        if (pathTmp == null || pathTmp.isEmpty()) {
            pathTmp = defaultPath
        }
        print("sdk path:" + pathTmp)
        return pathTmp
    } catch (Exception e) {
        e.printStackTrace()
    }
    return defaultPath
}